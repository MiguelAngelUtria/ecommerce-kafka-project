# ecommerce-kafka-project/docker-compose.yml
version: '3.8'

services:
  # --- Infrastructure Services ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-net

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_CREATE_TOPICS: "user-registration:1:1,welcome-flow:1:1,notification-topic:1:1,product-creation-log:1:1,cart-updates:1:1,cart-removals:1:1,order-created:1:1,email-service:1:1" # Descomentar y ajustar si quieres crear tópicos automáticamente
    networks:
      - ecommerce-net

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db
    networks:
      - ecommerce-net

  # --- Application Microservices ---

  user-service:
    build: ./services/user-service
    container_name: user-service
    ports:
      - "3001:3001"
    env_file:
      - ./services/user-service/.env
    networks:
      - ecommerce-net
    depends_on:
      - kafka
      - mongo

  welcome-service:
    build: ./services/welcome-service
    container_name: welcome-service
    env_file:
      - ./services/welcome-service/.env
    networks:
      - ecommerce-net
    depends_on:
      - kafka
      - mongo

  notification-service:
    build: ./services/notification-service
    container_name: notification-service
    env_file:
      - ./services/notification-service/.env
    networks:
      - ecommerce-net
    depends_on:
      - kafka
      - mongo

  product-service:
    build: ./services/product-service
    container_name: product-service
    ports:
      - "3002:3002"
    env_file:
      - ./services/product-service/.env
    networks:
      - ecommerce-net
    depends_on:
      - kafka
      - mongo

  cart-service:
    build: ./services/cart-service
    container_name: cart-service
    ports:
      - "3003:3003"
    env_file:
      - ./services/cart-service/.env
    networks:
      - ecommerce-net
    depends_on:
      - kafka
      - mongo

  order-service:
    build: ./services/order-service
    container_name: order-service
    ports:
      - "3004:3004"
    env_file:
      - ./services/order-service/.env
    networks:
      - ecommerce-net
    depends_on:
      - kafka
      - mongo

  # --- Seeder Service (Ejecución única opcional al inicio) ---
  # --- Seeder Service (Ejecución única opcional al inicio) ---
  product-seeder:
    build:
      context: ./services/product-service
      # Nota: Este seeder usa Faker.js que es devDependency.
      # Para que funcione aquí, necesitarías ajustar el Dockerfile (ver más abajo).
    container_name: product-seeder
    command: ["node", "seed.js"]          # <--- DESCOMENTAR
    env_file:                            # <--- DESCOMENTAR
      - ./services/product-service/.env  # <--- DESCOMENTAR
    networks:                            # <--- DESCOMENTAR
      - ecommerce-net                    # <--- DESCOMENTAR
    depends_on:                          # <--- DESCOMENTAR
      - mongo
      - kafka
    # restart: "no" # Opcional: para que no intente reiniciar si falla

networks:
  ecommerce-net:
    driver: bridge

volumes:
  mongo-data:
    driver: local